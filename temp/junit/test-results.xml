<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="56" time="41.071" timestamp="2025-04-14T21:57:19.162023+00:00" hostname="fv-az1048-508"><testcase classname="tests.test_config.TestLoggingConfig" name="test_github_secrets_with_yaml_config" time="0.004"><failure message="AssertionError: assert 10 == 50&#10; +  where 10 = get('rotation_size_mb')&#10; +    where get = LoggingConfig.get">self = &lt;test_config.TestLoggingConfig object at 0x7f84116217c0&gt;

    def test_github_secrets_with_yaml_config(self):
        """Test that GitHub secrets override values from YAML config"""
        # Create a temporary YAML config file
        with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w', delete=False) as f:
            yaml_path = f.name
            f.write("""
            log_dir: yaml_logs
            default_level: DEBUG
            rotation_size_mb: 50
            """)
    
        try:
            # Set up GitHub-style environment variables
            os.environ["GITHUB_LOGGING_DIR"] = "github_logs"
            os.environ["GITHUB_LOGGING_VERBOSE"] = "ERROR"
    
            # Initialize with the YAML file
            LoggingConfig.initialize(config_file=yaml_path)
    
            # GitHub secrets should override YAML config
            assert LoggingConfig.get("log_dir") == "github_logs"
            assert LoggingConfig.get("default_level") == "ERROR"
    
            # Values not in environment should be from YAML
&gt;           assert LoggingConfig.get("rotation_size_mb") == 50
E           AssertionError: assert 10 == 50
E            +  where 10 = get('rotation_size_mb')
E            +    where get = LoggingConfig.get

tests/test_config.py:36: AssertionError</failure></testcase><testcase classname="tests.test_config.TestLoggingConfig" name="test_priority_order_with_all_sources" time="0.004"><failure message="AssertionError: assert 10 == 50&#10; +  where 10 = get('rotation_size_mb')&#10; +    where get = LoggingConfig.get">self = &lt;test_config.TestLoggingConfig object at 0x7f8411621c10&gt;

    def test_priority_order_with_all_sources(self):
        """Test complete priority order with all configuration sources"""
        # Create a temporary YAML config file
        with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w', delete=False) as f:
            yaml_path = f.name
            f.write("""
            log_dir: yaml_logs
            default_level: DEBUG
            rotation_size_mb: 50
            backup_count: 10
            colored_console: false
            """)
    
        try:
            # 1. Set environment variables (should override YAML)
            os.environ["LOGGING_DIR"] = "env_logs"
            os.environ["GITHUB_LOGGING_VERBOSE"] = "INFO"
    
            # 2. Create command line args (should override env vars)
            # Mock sys.argv for parse_args
            import sys
            original_argv = sys.argv
            sys.argv = ["test_script.py", "--log-config", "cli_config.yaml"]
    
            # 3. Direct kwargs (should override everything)
            LoggingConfig.initialize(
                config_file=yaml_path,  # Initial file
                default_level="CRITICAL",  # This should win over all others
                parse_args=True  # Parse CLI args too
            )
    
            # Test priority order:
            # - direct kwargs (highest)
            assert LoggingConfig.get("default_level") == "CRITICAL"
    
            # - environment variables
            assert LoggingConfig.get("log_dir") == "env_logs"
    
            # - config file (lowest, except defaults)
&gt;           assert LoggingConfig.get("rotation_size_mb") == 50
E           AssertionError: assert 10 == 50
E            +  where 10 = get('rotation_size_mb')
E            +    where get = LoggingConfig.get

tests/test_config.py:83: AssertionError</failure></testcase><testcase classname="tests.test_config.TestLoggingConfig" name="test_cli_config_overrides_initial_config" time="0.004"><failure message="AssertionError: assert 'logs' == 'cli_logs'&#10;  &#10;  - cli_logs&#10;  + logs">self = &lt;test_config.TestLoggingConfig object at 0x7f8411621a00&gt;

    def test_cli_config_overrides_initial_config(self):
        """Test that config file from CLI args overrides the one passed to initialize()"""
        # Create two config files
        with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w', delete=False) as f1:
            initial_config = f1.name
            f1.write("log_dir: initial_logs\ndefault_level: DEBUG\n")
    
        with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w', delete=False) as f2:
            cli_config = f2.name
            f2.write("log_dir: cli_logs\ndefault_level: WARNING\n")
    
        try:
            # Mock CLI args to specify the second config
            import sys
            original_argv = sys.argv
            sys.argv = ["test_script.py", "--log-config", cli_config]
    
            # Initialize with the first config + parse CLI args
            LoggingConfig.initialize(config_file=initial_config, parse_args=True)
    
            # CLI config should win
&gt;           assert LoggingConfig.get("log_dir") == "cli_logs"
E           AssertionError: assert 'logs' == 'cli_logs'
E             
E             - cli_logs
E             + logs

tests/test_config.py:121: AssertionError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_environment_priority" time="0.002"><failure message="ModuleNotFoundError: No module named 'yaml'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_environment_priority&gt;

    def test_environment_priority(self):
        """Test the priority between different environment variable formats."""
        # Create simple YAML config
&gt;       yaml_path = self.create_yaml_config({
            'log_dir': 'yaml_logs',
            'default_level': 'WARNING'
        })

tests/test_config_loading.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_environment_priority&gt;
config_dict = {'default_level': 'WARNING', 'log_dir': 'yaml_logs'}

    def create_yaml_config(self, config_dict):
        """Create a temporary YAML config file with the given contents."""
&gt;       import yaml
E       ModuleNotFoundError: No module named 'yaml'

tests/test_config_loading.py:142: ModuleNotFoundError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_kwargs_override_all" time="0.002"><failure message="ModuleNotFoundError: No module named 'yaml'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_kwargs_override_all&gt;

    def test_kwargs_override_all(self):
        """Test that direct kwargs override both YAML and environment variables."""
        # Create YAML config
&gt;       yaml_path = self.create_yaml_config({
            'log_dir': 'yaml_logs',
            'default_level': 'WARNING',
            'rotation_size_mb': 50
        })

tests/test_config_loading.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_kwargs_override_all&gt;
config_dict = {'default_level': 'WARNING', 'log_dir': 'yaml_logs', 'rotation_size_mb': 50}

    def create_yaml_config(self, config_dict):
        """Create a temporary YAML config file with the given contents."""
&gt;       import yaml
E       ModuleNotFoundError: No module named 'yaml'

tests/test_config_loading.py:142: ModuleNotFoundError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_numeric_conversion" time="0.002"><failure message="ModuleNotFoundError: No module named 'yaml'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_numeric_conversion&gt;

    def test_numeric_conversion(self):
        """Test that numeric values are properly converted."""
        # Create YAML with string and numeric values
&gt;       yaml_path = self.create_yaml_config({
            'rotation_size_mb': '50',  # String in YAML
            'backup_count': 8          # Number in YAML
        })

tests/test_config_loading.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_numeric_conversion&gt;
config_dict = {'backup_count': 8, 'rotation_size_mb': '50'}

    def create_yaml_config(self, config_dict):
        """Create a temporary YAML config file with the given contents."""
&gt;       import yaml
E       ModuleNotFoundError: No module named 'yaml'

tests/test_config_loading.py:142: ModuleNotFoundError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_standard_env_vars" time="0.002"><failure message="ModuleNotFoundError: No module named 'yaml'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_standard_env_vars&gt;

    def test_standard_env_vars(self):
        """Test that standard (non-GitHub) environment variables override YAML."""
        # Create YAML config
&gt;       yaml_path = self.create_yaml_config({
            'log_dir': 'yaml_logs',
            'default_level': 'DEBUG',
            'rotation_size_mb': 50
        })

tests/test_config_loading.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_standard_env_vars&gt;
config_dict = {'default_level': 'DEBUG', 'log_dir': 'yaml_logs', 'rotation_size_mb': 50}

    def create_yaml_config(self, config_dict):
        """Create a temporary YAML config file with the given contents."""
&gt;       import yaml
E       ModuleNotFoundError: No module named 'yaml'

tests/test_config_loading.py:142: ModuleNotFoundError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_yaml_loading_sequence_verbose" time="0.002"><failure message="AssertionError: None != 'yaml_logs'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_yaml_loading_sequence_verbose&gt;

    def test_yaml_loading_sequence_verbose(self):
        """Test the exact sequence of configuration loading with detailed output."""
        yaml_path = os.path.join(self.temp_dir, "config.yaml")
    
        # Create a YAML file with specific values
        with open(yaml_path, 'w') as f:
            f.write("""
            log_dir: yaml_logs
            default_level: DEBUG
            rotation_size_mb: 50
            backup_count: 8
            """)
    
        # Step 1: Load the config_file directly and check values
        print("\n--- Step 1: Direct load_from_file ---")
        direct_config = LoggingConfig.load_from_file(yaml_path)
        print(f"Config after direct load: {direct_config}")
&gt;       self.assertEqual(direct_config.get("log_dir"), "yaml_logs")
E       AssertionError: None != 'yaml_logs'

tests/test_config_loading.py:67: AssertionError</failure></testcase><testcase classname="tests.test_config_loading.TestConfigurationLoading" name="test_yaml_values_preserved" time="0.002"><failure message="ModuleNotFoundError: No module named 'yaml'">self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_yaml_values_preserved&gt;

    def test_yaml_values_preserved(self):
        """Test that YAML values not in environment are preserved."""
        # Create YAML with multiple values
&gt;       yaml_path = self.create_yaml_config({
            'log_dir': 'yaml_logs',
            'default_level': 'DEBUG',
            'rotation_size_mb': 50,
            'backup_count': 8,
            'colored_console': False
        })

tests/test_config_loading.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_config_loading.TestConfigurationLoading testMethod=test_yaml_values_preserved&gt;
config_dict = {'backup_count': 8, 'colored_console': False, 'default_level': 'DEBUG', 'log_dir': 'yaml_logs', ...}

    def create_yaml_config(self, config_dict):
        """Create a temporary YAML config file with the given contents."""
&gt;       import yaml
E       ModuleNotFoundError: No module named 'yaml'

tests/test_config_loading.py:142: ModuleNotFoundError</failure></testcase><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_console_level_filtering" time="0.006" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_debug_level_logging" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_dynamic_level_updates" time="0.003" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_error_level_logging" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_info_level_logging" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_log_file_captures_all_levels" time="0.003" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_log_level_filtering" time="0.006" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_log_level_priority" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_logger_level_change_warning" time="0.003" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_multiple_logger_level_independence" time="0.003" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_nested_configuration_keys" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_rotation_size_impact" time="0.002" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_rotation_size_impact_1" time="0.549" /><testcase classname="tests.test_configurations.TestConfigurationsImpact" name="test_yaml_config_file" time="0.003"><failure message="AssertionError: 20 != 30 : Logger level 20 does not match expected 30">self = &lt;test_configurations.TestConfigurationsImpact testMethod=test_yaml_config_file&gt;

    def test_yaml_config_file(self):
        """Test loading configuration from YAML file."""
        # Write a test YAML file
        config_dir = tempfile.mkdtemp(prefix="log_config_test_")
        config_path = os.path.join(config_dir, "config.yaml")
    
        with open(config_path, "w") as f:
            f.write("""
            log_dir: '{0}'
            default_level: WARNING
            rotation_size_mb: 2
            """.format(config_dir))
    
        # Initialize with this config file
        LoggingConfig.initialize(config_file=config_path, parse_args=False)
    
        # Create a logger and test it
        logger = get_logger("yaml_test")
        logger.warning("Test YAML config")
    
&gt;       self.assertEqual(logger.level, logging.WARNING,
                         f"Logger level {logger.level} does not match expected {logging.WARNING}")
E       AssertionError: 20 != 30 : Logger level 20 does not match expected 30

tests/test_configurations.py:291: AssertionError</failure></testcase><testcase classname="tests.test_edge_cases.TestEdgeCases" name="test_non_ascii_messages" time="0.002" /><testcase classname="tests.test_edge_cases.TestEdgeCases" name="test_null_chars_in_log" time="0.002" /><testcase classname="tests.test_edge_cases.TestEdgeCases" name="test_permission_handling" time="0.002" /><testcase classname="tests.test_edge_cases.TestEdgeCases" name="test_rapid_creation" time="0.247" /><testcase classname="tests.test_edge_cases.TestEdgeCases" name="test_very_large_message" time="0.292" /><testcase classname="tests.test_integration.TestIntegration" name="test_env_var_config" time="0.004"><failure message="AssertionError: 'INFO' != 'WARNING'&#10;- INFO&#10;+ WARNING">self = &lt;test_integration.TestIntegration testMethod=test_env_var_config&gt;

    def test_env_var_config(self):
        """Test configuration through environment variables."""
        # Set environment variables
        os.environ['LOG_DIR'] = self.temp_dir
        os.environ['LOG_LEVEL'] = 'WARNING'
        os.environ['LOG_COLORED_CONSOLE'] = '0'
    
        # Initialize without explicit config to use env vars
        LoggingConfig.initialize()
    
        # Verify settings were applied
        self.assertEqual(LoggingConfig.get("log_dir"), self.temp_dir)
&gt;       self.assertEqual(LoggingConfig.get("default_level"), 'WARNING')
E       AssertionError: 'INFO' != 'WARNING'
E       - INFO
E       + WARNING

tests/test_integration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_integration.TestIntegration" name="test_exception_logging" time="0.002" /><testcase classname="tests.test_integration.TestIntegration" name="test_stdout_redirection" time="0.005" /><testcase classname="tests.test_log.TestColoredLogger" name="test_logger_initialization_stdout" time="0.005" /><testcase classname="tests.test_log.TestColoredLogger" name="test_logger_initialization" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_logger_no_redundant_handlers" time="0.002" /><testcase classname="tests.test_log.TestColoredLogger" name="test_log_file_creation" time="0.002" /><testcase classname="tests.test_log.TestColoredLogger" name="test_log_message_format" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_log_levels" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_multiprocessing_logging" time="0.014" /><testcase classname="tests.test_log.TestColoredLogger" name="test_logger_reset" time="0.005" /><testcase classname="tests.test_log.TestColoredLogger" name="test_critical_exit_handler" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_colored_formatter_output" time="0.006" /><testcase classname="tests.test_log.TestColoredLogger" name="test_file_handler_rotation" time="0.084" /><testcase classname="tests.test_log.TestColoredLogger" name="test_update_logger_level" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_level_setter" time="0.004" /><testcase classname="tests.test_log.TestColoredLogger" name="test_level_setter_affects_only_console_handlers" time="0.005" /><testcase classname="tests.test_mixed_concurrency.TestMixedConcurrency" name="test_basic_mixed_concurrency" time="0.537" /><testcase classname="tests.test_mixed_concurrency.TestMixedConcurrency" name="test_high_concurrency_pressure" time="1.059" /><testcase classname="tests.test_mixed_concurrency.TestMixedConcurrency" name="test_process_staggered_start_stop" time="1.159" /><testcase classname="tests.test_mixed_concurrency.TestMixedConcurrency" name="test_process_thread_isolation" time="0.017" /><testcase classname="tests.test_multithreading.TestMultithreading" name="test_concurrent_logging_medium_scale" time="0.278" /><testcase classname="tests.test_multithreading.TestMultithreading" name="test_concurrent_logging_small_scale" time="0.134" /><testcase classname="tests.test_multithreading.TestMultithreading" name="test_logging_under_thread_stress" time="0.608" /><testcase classname="tests.test_multithreading.TestMultithreading" name="test_thread_logger_independence" time="0.122" /><testcase classname="tests.test_stress.TestStressCases" name="test_bursty_logging" time="1.214" /><testcase classname="tests.test_stress.TestStressCases" name="test_flood_logging" time="3.905" /><testcase classname="tests.test_stress.TestStressCases" name="test_long_running" time="30.024" /></testsuite></testsuites>